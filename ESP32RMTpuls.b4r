Build1=Default,B4RDev
Group=Default Group
Library1=rcore
Library2=resp32rmtpuls
NumberOfFiles=0
NumberOfLibraries=2
NumberOfModules=0
Version=4
@EndOfDesignText@

#Region Project Attributes
	#AutoFlushLogs: True
	#CheckArrayBounds: True
	#StackBufferSize: 600
#End Region

'Testing ESP32RMTpuls lib
' This test program runs code "=== Before Setup End ==="
' Wait for the current pulse to end before send a new pulse on the same ch.(tx not queue'd)
' Board: ESP32S3 Dev Module, ESP32 Dev Module <- paste into board selector
Sub Process_Globals
	Public Serial1 As Serial
	Private RMT As ESP32RMTpuls
	Private Const ch0 = 0, ch1 = 1, ch2 = 2, ch3 = 3  As Byte ' RMT channel
	Private Const P2 = 2, P3 = 3, P4 = 4, P5 = 5 As Byte      ' GPIO pin
	  
End Sub

Private Sub AppStart
	Serial1.Initialize(115200)
	Log(" RMT Pulse AppStart")
	
	RMT_ch_Setup
	'TestSyncTX
	'Send_Puls
	'Test_FullBuffer
	'Test_StopPulse
	'TestPuls_us
	'TestPuls_s
	'TestPulsPeriod
	TestPulsTrain
	'PWM_MOD_test
	'SwitchGPIO    '<--  Disable RMT_ch_Setup for this test

End Sub



Sub RMT_ch_Setup
	RMT.channelConfig(ch0, P2, False)
	RMT.channelConfig(ch1, P3, False)
	RMT.channelConfig(ch2, P4, False)
	RMT.channelConfig(ch3, P5, False)
End Sub


Sub TestPulsPeriod
	RMT.TXpuls_prd(ch0, 70, 100, 20)  ' 70µs puls, 100µs prd, 20 pulses. 10khz, 70% duty
End Sub


Sub TestPuls_us
	RMT.TXpuls_us(ch0, 1, 0)
	RMT.TXpuls_us(ch1, 10, 0)
	RMT.TXpuls_us(ch2, 5, 5)
	RMT.TXpuls_us(ch3, 50, 0)
End Sub


Sub TestPuls_s
	RMT.TXpuls_s(ch0,1)
	RMT.TXpuls_s(ch1,2)
	RMT.TXpuls_s(ch2,3)
	RMT.TXpuls_s(ch3,7)
End Sub


Sub TestSyncTX
   Private RMTsync_ch() As Byte: RMTsync_ch = Array As Byte(0, 1)  ' channels to include in sync
	
	RMT.TXpuls_ms(ch2, 1, 0)  ' non-sync ch
	RMT.SYNC_ch(RMTsync_ch, 2, True)     ' Config & enable sync.
	RMT.TXpuls_ms(ch0, 5, 0)
	Delay(20)'ms

	RMT.TXpuls_ms(ch1, 5, 0)  ' < sync group will TX here
	Delay(25)'ms

	RMT.TXpuls_ms(ch2, 18, 0) ' non-sync ch
	RMT.TXpuls_ms(ch3, 40, 0) ' non-sync ch
	
	RMT.SYNC_ch(RMTsync_ch, 2, True)     ' rearm sync manager ready for next. (test: comment this line)
	RMT.TXpuls_ms(ch0, 10, 0)
	Delay(20)'ms
	RMT.TXpuls_ms(ch1, 10, 0)
	' Note: • Do not transmit on unrelated channels between SYNC_ch() and the last group TX start,
	'         as they may be inadvertently included in the sync group (ESP-IDF behavior)
	'       • Call SYNC_ch again before each new sync group TX to rearm the sync manager.
End Sub


Sub TestPulsTrain ' returns warn code: -1 = PW_us clamp, -2 = Puls_n clamp.
	Private Err As Int
	'Private RMTsync_ch() As Byte: RMTsync_ch = Array As Byte(0, 1, 2)  ' channels to include in sync
	'RMT.SYNC_ch(RMTsync_ch, 3, True)
	RMT.TXpulsTrain(ch0, 500, 1000, 10, 0)  ' 1khz 50% duty
	RMT.TXpulsTrain(ch1, 100, 1000, 20, 0)  ' 1khz 10% duty
	RMT.TXpulsTrain(ch2, 750, 1000, 10, 2)  ' 1khz 75% duty - test loop
	Err = RMT.TXpulsTrain(ch3, 1050, 1000, 10, 2) ' this will clamp PW_us = Prd_us(100% duty) & return -1(warning)
	Log("B4R pulsTrain: ", Err)
	
   '   A Pulsetrain (with greater period) can be created with other functions using loop x pulse.
	'   or applying PWM to a pulse (check pulse / PWM to avoid last PWM period error)
End Sub

' Apply modulation to ch pulse
Sub PWM_MOD_test
	RMT.PWMmod(ch0, 200000, 500) ' 200khz
	RMT.PWMmod(ch1, 30000, 500)  ' 30khz
	RMT.PWMmod(ch2, 1000, 900)   ' 1khz  <- this duty val=900 (intentional) is too large for selected frequency,
	RMT.PWMmod(ch3, 700, 500)    ' 700hz                                      lib will clamp duty & log warning.

	RMT.TXpuls_us(ch0, 5000, 0)
	RMT.TXpuls_us(ch1, 5000, 0)
	RMT.TXpuls_us(ch2, 5000, 0)
	RMT.TXpuls_us(ch3, 5000, 0)
	Delay(7)
	RMT.PWMmod(ch2, 0, 0)        '   Disable PWM.
	RMT.TXpuls_us(ch2, 1000, 0)
   ' There are limits on duty value at certain frequencies. See help doc.
End Sub

'
Sub SwitchGPIO
	RMT.channelConfig(ch0, P2, False)
	RMT.TXpulsTrain(ch0, 500, 40, 1000, 0)
	Delay(15)'ms
	RMT.SwitchGPIO(ch0, -1, P3, False) 'switch to P3
	Delay(15)'ms
	RMT.SwitchGPIO(ch0, P2, P4, False) 'switch to P4 & discon from P2
End Sub










' this is for another lib...
'--------------------------------------
' To enable custom Bit pattern eg. data encoded.
' Call funct with 2x 16bit UInt array. bit 0=lvl, bit 1:15 Duration.
' Sym_n = num of symbols. if Sym_n > MAX_SYMBOLS will use next ch(s) symbol mem. (next ch disabled)
Sub RMT_ENC_MEM
	'RMT.ENCmem(ch0, Dur0, Dur1, Sym_n, 0)
End Sub


